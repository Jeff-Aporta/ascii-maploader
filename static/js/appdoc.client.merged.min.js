"use strict";function _slicedToArray(e,a){return _arrayWithHoles(e)||_iterableToArrayLimit(e,a)||_unsupportedIterableToArray(e,a)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,a){if(e){if("string"==typeof e)return _arrayLikeToArray(e,a);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,a):void 0}}function _arrayLikeToArray(e,a){(null==a||a>e.length)&&(a=e.length);for(var t=0,n=Array(a);t<a;t++)n[t]=e[t];return n}function _iterableToArrayLimit(e,a){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,r,c,l,i=[],s=!0,o=!1;try{if(c=(t=t.call(e)).next,0===a){if(Object(t)!==t)return;s=!1}else for(;!(s=(n=c.call(t)).done)&&(i.push(n.value),i.length!==a);s=!0);}catch(e){o=!0,r=e}finally{try{if(!s&&null!=t.return&&(l=t.return(),Object(l)!==l))return}finally{if(o)throw r}}return i}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _cascade(){setTimeout(PR.prettyPrint);var e=loadStringsSync("static/jsx/fragmentos/frag-02.txt");return React.createElement($FMD,null,React.createElement($index,{label:"Inicio",variant:"h2",className:"nowrap"},"Modo cascada"),React.createElement($$h,null),"En lugar de escribir manualmente cada etiqueta de HTML para cargar tus dependencias, puedes usar un flujo de comandos que se encadenan de manera ordenada y lógica, lo que imita la estructura de un árbol de archivos.",React.createElement($PR,{lang:"html",className:"pad-10px mh-20px"},e),React.createElement($CardDef,{title:".tree(name_root)"},"La función `.tree(name_root)` se utiliza para iniciar la creación de una estructura de árbol en tu proyecto, donde `name_root` representa el nombre de la raíz del árbol. Esta función establece el punto de partida para organizar tus archivos y carpetas de manera jerárquica y modular.",React.createElement($h,null),"Al invocar esta función, estás creando un contenedor que te permitirá añadir diferentes elementos, como archivos de estilo, scripts y componentes, de forma ordenada. Esto ayuda a mantener tu proyecto limpio y fácil de navegar, ya que puedes ver claramente cómo se relacionan los diferentes archivos entre sí.",React.createElement($h,null),"Un ejemplo de cómo usar esta función es el siguiente:",React.createElement($PR,{elevation:0,lang:"js"},'var my_tree = asciiMap.tree("name-root");'),"En este caso, my_tree será el árbol que contiene todos los elementos que vayas a agregar a partir de este punto. Esta organización es fundamental para proyectos más complejos, donde es necesario mantener una estructura clara para facilitar el mantenimiento y la escalabilidad del código."),React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null),"#### Funciones de agregación",React.createElement($CardDef,{title:".css(...filesname)"},"Esta función se utiliza para agregar archivos de estilo en formato .css al árbol de tu proyecto. Por ejemplo, puedes escribir:",React.createElement($PR,{elevation:0,lang:"js"},'tree.css("style1","style2","style3");'),"para incluir varios estilos a la vez."),React.createElement($CardDef,{title:".js(...filesname)"},"Con esta función, puedes agregar archivos de JavaScript en formato .js al árbol. Un ejemplo sería:",React.createElement($PR,{elevation:0,lang:"js"},'tree.js("logic1","logic2","logic3");'),"donde puedes añadir múltiples archivos de lógica de tu aplicación."),React.createElement($CardDef,{title:".jsx(...filesname)"},"Similar a la función anterior, esta se usa para agregar archivos de JavaScript que contienen sintaxis JSX, comúnmente utilizados con React. Por ejemplo, al escribir",React.createElement($PR,{elevation:0,lang:"js"},'tree.jsx("react1","react2","react3");'),"estarás incluyendo varios componentes React en tu árbol."),"Estas funciones simplifican la gestión de archivos en tu proyecto, permitiéndote organizar y cargar tus dependencias de manera eficiente.",React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null),"#### Ramificación",React.createElement($CardDef,{title:".subDir(name_branch, subspace)"},"permite seleccionar una rama específica en la rama actual.",React.createElement($$h,null),React.createElement($,{variant:"h9"},React.createElement($secundario,null,"Ejemplo")),React.createElement($PR,{elevation:0,lang:"js"},['tree.subDir("name-branch", branch=>{','    branch.css("styles").js("script").jsx("App");',"})"].join("\n"))),React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null),"##### Funciones de conclusión",React.createElement($h,null),"Las funciones de conclusión son aquellas que detienen la cadena de llamadas en cascada, permitiendo finalizar la construcción de tu árbol de dependencias.",React.createElement($CardDef,{title:".writehtml()"},"Esta función se encarga de “quemar” el árbol en el documento HTML. Al ejecutarla, se insertan directamente las etiquetas generadas en el archivo HTML, asegurando que todas las dependencias estén correctamente integradas en tu página."),React.createElement($CardDef,{title:".toString()"},"devuelve una representación en forma de cadena de texto del árbol de dependencias que has construido. Esta función es útil para visualizar de manera rápida y clara la estructura jerárquica de tus archivos y carpetas.",React.createElement($h,null),"Por ejemplo, al usar la función de esta forma:",React.createElement($PR,{elevation:0,lang:"js"},['asciiMap.tree("public").subDir("ex-branch", branch=>{','    branch.css("style").js("script").jsx("App");',"}).toString()"].join("\n")),"El resultado será una cadena que muestra la organización de tus archivos en un formato que imita la estructura de un árbol de directorios, como el siguiente:",React.createElement($Copy,{className:"mh-10px pad-10px dark-02"},React.createElement("pre",null,React.createElement("code",{className:"c-khaki"},asciiMap.tree("public").subDir("ex-branch",(function(e){e.css("style").js("script").jsx("App")})).toString())))),React.createElement($CardDef,{title:".toHtml()"},"En lugar de modificar el HTML directamente, esta función retorna un arreglo que contiene las cadenas de texto de las etiquetas que se deberían incluir en el documento. Esto es útil si deseas manipular o revisar las etiquetas antes de insertarlas en el HTML.",React.createElement($h,null),"Por ejemplo, al utilizar la función de esta manera:",React.createElement($PR,{elevation:0,lang:"js"},['asciiMap.tree("public").subDir("ex-branch", branch=>{','    branch.css("style").js("script").jsx("App");',"}).toHtml()"].join("\n")),"El resultado será un arreglo que incluye las etiquetas necesarias para cargar los archivos correspondientes:",React.createElement($PR,{elevation:0,lang:"js"},"[",React.createElement("br",null),asciiMap.tree("public").subDir("ex-branch",(function(e){e.css("style").js("script").jsx("App")})).toHtml().map((function(e){return"  '"+e+"'"})).join(",\n"),React.createElement("br",null),"]")),React.createElement($CardDef,{title:".toJson()"},"convierte la estructura del árbol de dependencias que has creado en un formato JSON, lo que facilita su manipulación y almacenamiento. Este formato es especialmente útil si deseas integrar los datos en aplicaciones que manejan estructuras JSON o si necesitas realizar operaciones adicionales sobre la información.",React.createElement("p",null,"Por ejemplo, al utilizar la función de esta manera:"),React.createElement($PR,{elevation:0,lang:"js"},['asciiMap.tree("public").subDir("ex-branch", branch=>{','    branch.css("style").js("script").jsx("App");',"}).toJson()"].join("\n")),React.createElement("p",null,"El resultado será un objeto JSON que representa la jerarquía de tus archivos de la siguiente manera:"),React.createElement($PR,{elevation:0,lang:"json"},JSON.stringify(asciiMap.tree("public").subDir("ex-branch",(function(e){e.css("style").js("script").jsx("App")})).toJson(),null,1).replaceAll('"type": "text/javascript"',"").split("\n").filter((function(e){return Boolean(e.trim())})).join("\n")),React.createElement("p",null,"En esta representación, cada carpeta y archivo está claramente definido, permitiendo ver su relación dentro de la estructura del proyecto. Esto no solo facilita la visualización, sino que también permite que otros sistemas procesen esta información de manera más eficiente.")))}function initApp(){Object.assign(config_template,{banner:{left:{label:"Documentación",logo:"static/img/icon.svg"},right:{social:{github:{label:"Jeff-Aporta",url:"https://github.com/Jeff-Aporta"},youtube:{label:"YouTube",url:"https://www.youtube.com/@JeffAporta"},whatsapp:{label:"WhatsApp",url:"https://wa.link/1tmqmt"},telegram:{label:"Telegram",url:"https://t.me/jeffAporta"}}}},default_id:"intro",mapSite:[{lbl:" "},{component:function(){return React.createElement("center",null,React.createElement(Button,{color:"darkprimary",variant:"contained",startIcon:React.createElement("i",{className:"fa fa-globe"}),target:"_blank",href:"https://jeff-aporta.github.io/portafolio/"},"Más en mi portafolio"))}},{lbl:" - "},{lbl:"Empecemos"},{lbl:"Introducción",id:"intro",content:function(){return React.createElement(_intro,null)},i:"fa-regular fa-file-lines"},{lbl:"Acerca del lenguaje",id:"learn",content:function(){return React.createElement(_learn,null)},i:"fa-solid fa-chalkboard-user"},{lbl:" "},{lbl:"Uso"},{lbl:"Modo Cascada",id:"cascade",content:function(){return React.createElement(_cascade,null)},i:"fa-solid fa-code"},{lbl:"Inserción por cadena",id:"string",content:function(){return React.createElement(_string,null)},i:"fa-solid fa-code"},{lbl:"  "}],repo:{name:"ASCII Map Loader",url:"https://github.com/Jeff-Aporta/ascii-maploader"}}),ReactDOM.render(React.createElement(App,null),document.getElementById("root")),changeContent({id:get_id_param()})}function _intro(){return setTimeout(PR.prettyPrint),React.createElement($FMD,null,React.createElement(_$Bienvenido,{name_app:"ASCII Map Loader",img_url:"static/img/thumb.png"},"Es un lenguaje interpretado que permite cargar dependencias de archivos `.jsx`, `.js` y `.css`. Se destaca por estar diseñado para inyectar estos elementos en tiempo real al cargar un documento HTML mediante el uso de la función `document.write()`.",React.createElement($$h,null),"Perfecto para cuando estás haciendo desarrollos de multiples módulos en un proyecto, personalmente lo uso para comprobar que los archivos `.mjs` sean compatibles en las dependencias de páginas estáticas o que deban ser usadas necesariamente en el cliente."),React.createElement($$h,null),React.createElement($hr,null),React.createElement($h,null),React.createElement(_$Instalación,{url_cdn:"https://jeff-aporta.github.io/ascii-maploader/static/js/index.all.min.js",npm_pack:"ascii-maploader"}),React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null),React.createElement(_$testing,{src_params_iife:{url:"https://jeff-aporta.github.io/ascii-maploader/static/js/index.all.min.js",name:"asciiMap",comment:"{CLI: {…}, html: ƒ, json: ƒ, tree: ƒ, writehtml: ƒ, …} --\x3e all OK!"}}),React.createElement($$h,null),React.createElement($hr,null),React.createElement($$h,null),React.createElement($index,{variant:"h3",label:"Funciones Relevantes"},"Funciones Relevantes"),React.createElement($$h,null),React.createElement($,{variant:"h8"},React.createElement($secundario,null,"Estructuración de cascada")),React.createElement($CardDef,{title:"tree"},"Función que inicia la generación de un árbol en estructura de cascada"),React.createElement($,{variant:"h8"},React.createElement($secundario,null,"Funciones de carga")),React.createElement($CardDef,{title:"writehtml"},"Función que quema las dependencias al HTML"),React.createElement($CardDef,{title:"CLI"},"Gestor enlaces a librerias recurrentes como react y babel."),React.createElement($,{variant:"h8"},React.createElement($secundario,null,"Funciones de conversión")),React.createElement($CardDef,{title:"html"},"Función que retorna un arreglo de etiquetas que importan las dependencias"),React.createElement($CardDef,{title:"json"},"Función que retorna un JSON que representa la estructura de dependencias"))}function _learn(){var e=loadStringsSync("static/jsx/fragmentos/frag-01.txt");return React.createElement($FMD,null,React.createElement($index,{label:"Empecemos",variant:"h2",className:"nowrap"},"Lenguaje de dependencias"),React.createElement($$h,null),"El lenguaje de carga de dependencias representado en la estructura del ejemplo permite gestionar de manera eficiente la inclusión de múltiples archivos de script y estilo en un proyecto web, facilitando la organización y mantenibilidad del código. A continuación, se describen sus propiedades y ventajas en comparación con la inserción manual de scripts y enlaces en HTML:",React.createElement($$h,null),React.createElement($,{variant:"h9"},React.createElement($secundario,null,"Ejemplo de un árbol de carga de dependencias.")),React.createElement($$h,null),"Imagina que estás organizando un proyecto web, y para ello, decides estructurar tus archivos de manera ordenada. Este es un ejemplo de cómo podría verse el árbol de carga de dependencias de tu proyecto:",React.createElement($CardCopy,{className:"pad-10px mh-20px",style:{color:"Khaki"}},React.createElement("pre",null,e)),React.createElement($h,null),"Cada uno de los archivos en este árbol de directorios puede ser referenciado en un documento HTML de la siguiente manera:",React.createElement($PR,{lang:"html",className:"pad-10px mh-20px",style:{color:"Khaki"}},asciiMap.html(e).join("\n")),"Ahora, analiza ambas formas de organizar la carga de dependencias. La estructura de carpetas y archivos proporciona una representación visual clara de la organización de tu proyecto. Puedes ver de un vistazo cómo están distribuidos los componentes y qué archivos están relacionados entre sí.",React.createElement($h,null),"Por otro lado, la carga de recursos en el HTML, aunque funcional, puede parecer un poco caótica y menos intuitiva. En esta cadena de scripts y enlaces, puede ser más difícil identificar rápidamente de dónde proviene cada archivo y cómo se relaciona con los demás.",React.createElement($$h,null),React.createElement(Card,{className:"pad-20px mh-10px"},"Ahora que has comparado ambas opciones, tú mismo puedes juzgar cuál de ellas es más entendible. La organización jerárquica no solo facilita la gestión del proyecto, sino que también mejora la legibilidad y el mantenimiento del código a lo largo del tiempo. Un árbol de carga de dependencias bien estructurado te permitirá tener un panorama claro de tu proyecto y será de gran ayuda para ti y cualquier colaborador que se sume al trabajo."),React.createElement($h,null),React.createElement($index,{variant:"h5"},"Propiedades"),React.createElement("br",null),React.createElement($CardDef,{title:"Estructura Modular"},"La carga de dependencias se organiza de forma jerárquica, permitiendo una mejor visualización y acceso a componentes y hojas de estilo. Por ejemplo, los archivos se integran de forma ordenada en como aparecen en la expresión."),React.createElement($CardDef,{title:"Gestión Centralizada"},"Todos los recursos necesarios, desde componentes JavaScript hasta hojas de estilo CSS, se agrupan en carpetas específicas como `src` y `componentes`, lo que facilita la localización y edición de ruta de archivos."),React.createElement($CardDef,{title:"Soporte para Librerías y Envolventes"},"La inclusión de carpetas dedicadas a librerías y envolventes en `paginas` y `main` ayuda a segmentar el proyecto en submódulos más manejables."),React.createElement($h,null),React.createElement($index,{variant:"h5"},"Ventajas"),React.createElement($h,null),React.createElement($CardDef,{title:"Mantenibilidad y Escalabilidad"},"A diferencia de la inclusión manual de múltiples `<script>` y ` <link>` en un archivo HTML, la carga de dependencias con este enfoque permite modificar o actualizar componentes y estilos de manera centralizada sin necesidad de buscar y modificar cada referencia en el documento HTML."),React.createElement($CardDef,{title:"Mejor Organización de Código"},"La estructura de carpetas ayuda a separar el contenido de la lógica de la aplicación, reduciendo la confusión y facilitando la colaboración entre desarrolladores."),React.createElement($CardDef,{title:"Uso de bifurcaciones según casos"},"Las estructuras condicionales como `if` o `switch` permiten gestionar la carga de dependencias de forma flexible, evitando la inclusión innecesaria de recursos o adaptando la carga a diferentes situaciones. Esto es útil para optimizar el rendimiento y personalizar la experiencia según las condiciones específicas de cada caso."))}function _string(){setTimeout(PR.prettyPrint);var e=loadStringsSync("static/jsx/fragmentos/frag-03.txt");return React.createElement($FMD,null,React.createElement($index,{variant:"h1",className:fluidCSS().end("nowrap")},"Mapa ASCII"),React.createElement($$h,null),"La iniciativa de este proyecto surgió para resolver la complejidad de gestionar dependencias en sitios web estáticos de forma eficiente y organizada. Utilizar un mapa ASCII permite visualizar y manejar estas dependencias con mayor claridad, replicando la estructura de archivos de tu proyecto de forma comprensible.",React.createElement($h,null),React.createElement($PR,{lang:"html",className:"pad-10px mh-20px",style:{color:"Khaki"}},e),"Este enfoque ofrece una manera más ordenada y programática de gestionar la inserción de scripts y hojas de estilo, haciendo que tu código sea más limpio y fácil de mantener.",React.createElement($$h,null),React.createElement($hr,null),React.createElement($h,null),React.createElement($index,{variant:"h5"},"Caracteres y Decoradores"),React.createElement($CardDef,{title:"Secuencias o Caracteres Ignorados"},a({"➤":"Indica el inicio de un árbol de dependencias.","──":"Utilizado para decorar las ramas del árbol, brindando una apariencia\n          visual organizada."})),React.createElement($CardDef,{title:"Indicadores de Nivel"},a({"├":"Representa una bifurcación a la derecha y continúa hacia abajo.","└":"Marca una bifurcación solo a la derecha, señalando el final de esa\n          rama.","│":"Indica un camino que no tiene bifurcaciones en ese renglón.","╧":"Señala el final de un camino específico."})),React.createElement($CardDef,{title:"Indicadores de Ramas"},a({"🌐":"Indica un directorio web.","📁":"Representa un directorio estándar.","🗀":"Muestra un directorio que se ignora en la carga de dependencias."})),React.createElement($CardDef,{title:"Indicadores de Hojas"},a({"🔗":"Indica un archivo web.","📄":"Representa un archivo JS o JSX"})),React.createElement($CardDef,{title:"Tipo de Archivo"},a({"🎨":"Marca archivos de tipo CSS.","🖼️":"Indica que un archivo .css tiene el mismo nombre que otro archivo en\n          el directorio.","📦":"Señala un archivo JavaScript que es de tipo módulo.","🐌":"Muestra un archivo JavaScript que tiene la propiedad `defer` activada."})),React.createElement($CardDef,{title:"Especiales"},a({"🏠":"Un archivo marcado con este decorador se cargará en la raíz del\n          proyecto, incluso si está representado en un subdirectorio."})),React.createElement($$h,null),React.createElement(Card,{elevation:6,className:"pad-30px"},"Esta guía ayuda a interpretar y utilizar un sistema de símbolos para representar estructuras de archivos y dependencias de forma visual, facilitando la organización y la carga de recursos en proyectos de desarrollo."));function a(e){return Object.entries(e).map((function(e){var a=_slicedToArray(e,2),t=a[0],n=a[1];return React.createElement($CardDef,{elevation:0,title:React.createElement($CardCopy,null,React.createElement($enfasis,null,t))},n)}))}}